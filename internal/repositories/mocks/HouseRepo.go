// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "avito/internal/domain/models"
)

// HouseRepo is an autogenerated mock type for the HouseRepo type
type HouseRepo struct {
	mock.Mock
}

// CreateHouse provides a mock function with given fields: ctx, house
func (_m *HouseRepo) CreateHouse(ctx context.Context, house *models.House) error {
	ret := _m.Called(ctx, house)

	if len(ret) == 0 {
		panic("no return value specified for CreateHouse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.House) error); ok {
		r0 = rf(ctx, house)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFlatsByHouseID provides a mock function with given fields: ctx, houseID, role
func (_m *HouseRepo) GetFlatsByHouseID(ctx context.Context, houseID int, role string) ([]models.Flat, error) {
	ret := _m.Called(ctx, houseID, role)

	if len(ret) == 0 {
		panic("no return value specified for GetFlatsByHouseID")
	}

	var r0 []models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]models.Flat, error)); ok {
		return rf(ctx, houseID, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []models.Flat); ok {
		r0 = rf(ctx, houseID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, houseID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToHouse provides a mock function with given fields: ctx, houseID, email
func (_m *HouseRepo) SubscribeToHouse(ctx context.Context, houseID int, email string) error {
	ret := _m.Called(ctx, houseID, email)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToHouse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, houseID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHouseRepo creates a new instance of HouseRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHouseRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *HouseRepo {
	mock := &HouseRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
