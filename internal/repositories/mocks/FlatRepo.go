// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "avito/internal/domain/models"
)

// FlatRepo is an autogenerated mock type for the FlatRepo type
type FlatRepo struct {
	mock.Mock
}

// CreateFlat provides a mock function with given fields: ctx, flat
func (_m *FlatRepo) CreateFlat(ctx context.Context, flat *models.Flat) (int, error) {
	ret := _m.Called(ctx, flat)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlat")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Flat) (int, error)); ok {
		return rf(ctx, flat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Flat) int); ok {
		r0 = rf(ctx, flat)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Flat) error); ok {
		r1 = rf(ctx, flat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlatByID provides a mock function with given fields: ctx, flatID
func (_m *FlatRepo) GetFlatByID(ctx context.Context, flatID int) (*models.Flat, error) {
	ret := _m.Called(ctx, flatID)

	if len(ret) == 0 {
		panic("no return value specified for GetFlatByID")
	}

	var r0 *models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Flat, error)); ok {
		return rf(ctx, flatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Flat); ok {
		r0 = rf(ctx, flatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, flatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlatsByHouseID provides a mock function with given fields: ctx, houseID
func (_m *FlatRepo) GetFlatsByHouseID(ctx context.Context, houseID int) ([]*models.Flat, error) {
	ret := _m.Called(ctx, houseID)

	if len(ret) == 0 {
		panic("no return value specified for GetFlatsByHouseID")
	}

	var r0 []*models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Flat, error)); ok {
		return rf(ctx, houseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Flat); ok {
		r0 = rf(ctx, houseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, houseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlatStatus provides a mock function with given fields: ctx, flatID, status, moderatorID
func (_m *FlatRepo) UpdateFlatStatus(ctx context.Context, flatID int, status string, moderatorID *string) (*models.Flat, error) {
	ret := _m.Called(ctx, flatID, status, moderatorID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlatStatus")
	}

	var r0 *models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *string) (*models.Flat, error)); ok {
		return rf(ctx, flatID, status, moderatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *string) *models.Flat); ok {
		r0 = rf(ctx, flatID, status, moderatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *string) error); ok {
		r1 = rf(ctx, flatID, status, moderatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFlatRepo creates a new instance of FlatRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlatRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlatRepo {
	mock := &FlatRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
